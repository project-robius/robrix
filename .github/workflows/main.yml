# Trigger CI on PR updates and main branch pushes
# Uses caching and selective path triggers to optimize performance

name: Robrix Rust CI

# Only `main` branch
on:
    push:
      branches:
        - main
      paths:
        - packaging/**
        - resources/**
        - src/**
        - .github/**
        - Cargo.toml
        - rust-toolchain.toml

    pull_request:
      types: [opened, synchronize, reopened, ready_for_review]
      branches:
        - main
      paths:
        - packaging/**
        - resources/**
        - src/**
        - .github/**
        - Cargo.toml
        - rust-toolchain.toml

# Prevent concurrent CI runs and cancel in-progress runs on new pushes
concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

# Global environment configuration
env:
    CARGO_TERM_COLOR: always
    CARGO_INCREMENTAL: "0"  # Disable incremental compilation in CI
    RUST_BACKTRACE: 1
    # Enable warnings as errors for strict checks
    RUSTFLAGS: "-D warnings"

jobs:
  # Basic compilation check to ensure code builds
  check:
    if: github.event.pull_request.draft == false
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      # Cache dependencies to speed up builds
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
          cache-on-failure: "true"
      # Check if the code compiles with all features
      - run: cargo check --workspace --all-features --all-targets

  clippy:
    if: github.event.pull_request.draft == false
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
          cache-on-failure: "true"
      # Run clippy with custom configuration for makepad DSL
      # Allow pedantic / needless_lifetimes / too_many_arguments
      - run: cargo clippy --workspace --examples --tests --all-features --all-targets

  typos:
    if: github.event.pull_request.draft == false
    name: Check for typos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for typos
        uses: crate-ci/typos@master

  test:
    if: github.event.pull_request.draft == false
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Optimize disk space
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with: # speed things up a bit
          large-packages: false
          docker-images: false
          swap-storage: false
      # Install the necessary makepad system-level dependencies
      - run: sudo apt-get update
      - run: sudo apt install libxcursor-dev libasound2-dev libpulse-dev
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
          cache-on-failure: "true"
          cache-targets: "true" # Cache compiled output
      # Compile all tests first then parallelize test runs
      - name: Compile Tests
        run: cargo test --workspace --all-features --all-targets --no-run
      - name: Run Tests
        run: |
          ulimit -v 4096000
          cargo test --workspace --all-features --all-targets -- --test-threads=$(nproc)