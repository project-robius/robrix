[package]
name = "robrix"
authors = [
    "Kevin Boos <kevinaboos@gmail.com>",
    "Robius Project Maintainers",
]
description = "A Matrix chat client written using Makepad + Robius app dev framework in Rust."
documentation = "https://docs.rs/robrix"
edition = "2021"
homepage = "https://robius.rs/"
keywords = ["matrix", "chat", "client", "robrix", "robius"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/project-robius/robrix"
version = "0.0.1-pre-alpha-3"
metadata.makepad-auto-version = "zqpv-Yj-K7WNVK2I8h5Okhho46Q="

[dependencies]
makepad-widgets = { git = "https://github.com/makepad/makepad", branch = "dev" }

## Including this crate automatically configures all `robius-*` crates to work with Makepad.
robius-use-makepad = "0.1.1"
robius-open = { git = "https://github.com/project-robius/robius" }
robius-directories = { git = "https://github.com/project-robius/robius" }
robius-location = { git = "https://github.com/project-robius/robius" }


anyhow = "1.0"
chrono = "0.4"
clap = { version = "4.0.16", features = ["derive"] }
crossbeam-channel = "0.5.10"
crossbeam-queue = "0.3.8"
eyeball = { version = "0.8.8", features = ["tracing"] }    # same as matrix-sdk
eyeball-im = { version = "0.7.0", features = ["tracing"] } # same as matrix-sdk
futures-util = "0.3"
htmlize = "1.0.5"
imbl = { version = "5.0.0", features = ["serde"] }         # same as matrix-sdk-ui
imghdr = "0.7.0"
linkify = "0.10.0"
matrix-sdk = { git = "https://github.com/matrix-org/matrix-rust-sdk", branch = "main", default-features = false, features = [ "e2e-encryption", "automatic-room-key-forwarding", "markdown", "sqlite", "rustls-tls", "bundled-sqlite", "sso-login" ] }
matrix-sdk-ui = { git = "https://github.com/matrix-org/matrix-rust-sdk", branch = "main", default-features = false, features = [ "rustls-tls" ] }
rand = "0.8.5"
rangemap = "1.5.0"
sanitize-filename = "0.6"
serde = "1.0"
serde_json = "1.0"
tokio = { version = "1.43.1", features = ["macros", "rt-multi-thread"] }
tracing-subscriber = "0.3.17"
unicode-segmentation = "1.11.0"
url = "2.5.0"
bytesize = "2.0"
bitflags = "2.6.0"
indexmap = "2.6.0"
blurhash = { version = "0.2.3", default-features = false }

## Dependencies for TSP support.
tsp_sdk = { git = "https://github.com/openwallet-foundation-labs/tsp.git", optional = true, features = ["async", "resolve"] }
# tsp_sdk = { version = "0.8.0", optional = true, default-features = false, features = ["async", "resolve"] }
quinn = { version = "0.11.8", default-features = false, optional = true }
percent-encoding = { version = "2.3", optional = true }
## The following reqwest features were taken from the tsp_sdk's `Cargo.toml` file.
## I'm not sure if all of them are actually needed.
reqwest = { version = "0.12", default-features = false, features = [
    "rustls-tls-native-roots",
    "json",
    "stream",
    "charset",
    "http2",
    "macos-system-configuration",
] }


[features]
default = []
## Enables experimental support for using TSP wallets.
tsp = ["dep:tsp_sdk", "dep:quinn", "dep:percent-encoding"]

## Hides the command prompt console on Windows.
hide_windows_console = []

## Logs all diffs received by the Matrix RoomListService.
log_room_list_diffs = []

## Logs all diffs to all room timelines.
log_timeline_diffs = []


[patch.crates-io]
## This is required to avoid a version conflict on the libsqlite3-sys crate,
## which is a native crate that can only exist once in the dependency graph.
## The `matrix-sdk` crate's dependencies require a specific version of `libsqlite3-sys`
## (via rustsqlite which requires libsqlite3-sys 0.33.0),
## whereas the `tsp_sdk` crate depends on `sqlx`, which requires a different version
## of `libsqlite3-sys` (via `aries-askar`, which depends on `askar-storage`,
## which requires libsqlite3-sys 0.30.0).
## So this patch is a custom version of sqlx that *pretends* to be 0.8.6
## (even though in reality uses the newest commit of `sqlx`,
## which recently was updated to allow for a *range* of versions of `libsqlite3-sys`).
## See <https://github.com/launchbadge/sqlx/pull/3928/files#diff-4f4849707ed063bc5de6d9f6d105f0e7baf62d1085b3c8aee4a547468b89248fR57>
# sqlx = { git = "https://github.com/project-robius/sqlx.git", branch = "version_0.9_alpha_as_0.8.6" }
sqlx = { git = "https://github.com/project-robius/sqlx.git", branch = "update_libsqlite3-sys_version" }

## This is required for the askar repos to work with the above-patched `sqlx` crate,
## more specifically, the updated `libsqlite3-sys` version (0.31.0).
## See <https://github.com/openwallet-foundation/askar/pull/386>
askar-storage = { git = "https://github.com/openwallet-foundation/askar.git", rev = "0b919bb58205416df7cd2cc1a24ce52373cbe105" }


[package.metadata.docs.rs]
all-features = true


## An optimized profile for development, with full debug info and assertions.
[profile.debug-opt]
inherits = "dev"
opt-level = 3

## An optimized release profile with thin LTO.
[profile.release-lto]
inherits = "release"
lto = "thin"

## Enable full optimizations when building app bundles for distribution.
[profile.distribution]
inherits = "release"
codegen-units = 1
lto = "fat" 


## Configuration for `cargo packager`
[package.metadata.packager]
product_name = "Robrix"
identifier = "org.robius.robrix"
category = "SocialNetworking"
authors = ["Project Robius <contact@robius.rs>", "Kevin Boos <kevinaboos@gmail.com>"]
publisher = "robius"
license_file = "LICENSE-MIT"
copyright = "Copyright 2023-202, Project Robius"
homepage = "https://github.com/project-robius"
### Note: there is an 80-character max for each line of the `long_description`.
long_description = """
Robrix is a multi-platform Matrix chat client written in pure Rust
using the Makepad UI framework (https://github.com/makepad/makepad)
and the Project Robius app dev framework and platform abstractions
(https://github.com/project-robius).
Robrix runs on all major desktop and mobile platforms:
macOS, Windows, Linux, Android, and iOS.
"""
icons = ["./packaging/robrix_logo_alpha.png"]
out_dir = "./dist"

## Here, we define the list of resource directories for both Makepad and Robrix.
## The `src` directory is based on `./dist/` as the `out_dir` (above), which is where the
## `robius-packaging-commands` tool outputs the resources that it discovers after each build.
## See the README from the `robius-packaging-commands` repo for more details.
resources = [
    # Makepad resources
    { src = "./dist/resources/makepad_widgets", target = "makepad_widgets" },
    { src = "./dist/resources/makepad_fonts_chinese_bold", target = "makepad_fonts_chinese_bold" },
    { src = "./dist/resources/makepad_fonts_chinese_bold_2", target = "makepad_fonts_chinese_bold_2" },
    { src = "./dist/resources/makepad_fonts_chinese_regular", target = "makepad_fonts_chinese_regular" },
    { src = "./dist/resources/makepad_fonts_chinese_regular_2", target = "makepad_fonts_chinese_regular_2" },
    { src = "./dist/resources/makepad_fonts_emoji", target = "makepad_fonts_emoji" },
    # Robrix resources
    { src = "./dist/resources/robrix", target = "robrix" },
]

## We use the `robius-packaging-commands` tool to build the entire Robrix app project,
## which properly configures the release build settings for each target platform
## (e.g., it sets the `MAKEPAD`/`MAKEPAD_PACKAGE_DIR` env vars to the appropriate value).
before-each-package-command = """
robius-packaging-commands before-each-package \
    --force-makepad \
    --binary-name robrix \
    --path-to-binary ./target/release/robrix
"""

deep_link_protocols = [
    { schemes = ["robrix", "matrix"], role = "viewer" }, ## `name` is left as default
]

[package.metadata.packager.deb]
depends = "./dist/depends_deb.txt"
desktop_template = "./packaging/robrix.desktop"
section = "utils"

[package.metadata.packager.macos]
minimum_system_version = "11.0"
frameworks = [ ]
info_plist_path = "./packaging/Info.plist"
entitlements = "./packaging/Entitlements.plist"
signing_identity = "-"


## Configuration for `cargo packager`'s generation of a macOS `.dmg`.
[package.metadata.packager.dmg]
background = "./packaging/Robrix macOS dmg background.png"
window_size = { width = 960, height = 540 }
app_position = { x = 200, y = 250 }
application_folder_position = { x = 760, y = 250 }


## Configuration for `cargo packager`'s generation of a Windows `.exe` setup installer.
[package.metadata.packager.nsis]
## See this: <https://nsis.sourceforge.io/Docs/Chapter4.html#varconstant>
appdata_paths = [
    "$APPDATA/$PUBLISHER/$PRODUCTNAME",
    "$LOCALAPPDATA/$PRODUCTNAME",
]

[lints.rust]
keyword_idents_2024 = "forbid"
non_ascii_idents = "forbid"
non_local_definitions = "forbid"
unsafe_op_in_unsafe_fn = "forbid"
unnameable_types = "warn"
unused_import_braces = "warn"

## Configuration for clippy lints.
[lints.clippy]
collapsible_if = "allow"
collapsible_else_if = "allow"
too_many_arguments = "allow"
blocks_in_conditions = "allow"
used_underscore_binding = "allow"
module_name_repetitions = "allow"
uninlined_format_args = "allow"
